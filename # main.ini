# main.py
from fastapi import FastAPI, WebSocket
from fastapi.websockets import WebSocketDisconnect
from typing import List
import asyncio

app = FastAPI()

# 프론트엔드와 연결된 WebSocket들을 관리하는 리스트
active_websockets: List[WebSocket] = []

# (가상의) 증권사로부터 실시간 시세를 받는 함수
async def get_realtime_stock_price():
    # 여기에 실제 증권사 API 연동 로직을 구현
    # 예: 증권사 WebSocket API에 연결하여 데이터를 받는 로직
    while True:
        # (예시) 1초마다 가상의 주식 시세 데이터 생성
        data = {"symbol": "005930", "price": 75000 + (asyncio.get_running_loop().time() % 100) * 10}
        print(f"새 시세 데이터: {data}")
        # 연결된 모든 클라이언트에게 데이터 전송
        for websocket in active_websockets:
            try:
                await websocket.send_json(data)
            except WebSocketDisconnect:
                # 연결이 끊긴 클라이언트는 리스트에서 제거
                active_websockets.remove(websocket)
        await asyncio.sleep(1)

@app.websocket("/ws/stock")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    active_websockets.append(websocket)
    print("새로운 클라이언트 연결됨")
    try:
        # 클라이언트 연결이 유지되는 동안 대기
        while True:
            await websocket.receive_text() # 클라이언트로부터의 메시지 수신 (필요 시)
    except WebSocketDisconnect:
        active_websockets.remove(websocket)
        print("클라이언트 연결 끊김")

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(get_realtime_stock_price())

uvicorn main:app --reload
